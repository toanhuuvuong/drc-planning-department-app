/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * pkh-api
 * pkh api
 * OpenAPI spec version: 0.0.1
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { KhovtTransPhieuXuat, KhovtTransPhieuXuatWithRelations, LoopbackCount } from '../../models';

export const getKhovtTransPhieuXuatControllerCountResponseMock = (
  overrideResponse: Partial<LoopbackCount> = {},
): LoopbackCount => ({
  count: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  ...overrideResponse,
});

export const getKhovtTransPhieuXuatControllerFindByIdResponseMock = (
  overrideResponse: Partial<KhovtTransPhieuXuatWithRelations> = {},
): KhovtTransPhieuXuatWithRelations => ({
  diDoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ghiChu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  khoNhap: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  khoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ngayXuat: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  nguoiTaoPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  soPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  status: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  thongTinCanhBao: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ...overrideResponse,
});

export const getKhovtTransPhieuXuatControllerCreateResponseMock = (
  overrideResponse: Partial<KhovtTransPhieuXuat> = {},
): KhovtTransPhieuXuat => ({
  diDoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ghiChu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  khoNhap: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  khoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ngayXuat: faker.helpers.arrayElement([
    faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
    undefined,
  ]),
  nguoiTaoPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  soPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  status: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  thongTinCanhBao: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  ...overrideResponse,
});

export const getKhovtTransPhieuXuatControllerFindResponseMock = (): KhovtTransPhieuXuatWithRelations[] =>
  Array.from({ length: faker.number.int({ min: 10, max: 100 }) }, (_, i) => i + 1).map(() => ({
    diDoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    ghiChu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    id: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 100 })]),
    khoNhap: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    khoXuat: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    ngayXuat: faker.helpers.arrayElement([
      faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
      undefined,
    ]),
    nguoiTaoPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    soPhieu: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    status: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
    thongTinCanhBao: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]),
  }));

export const getKhovtTransPhieuXuatControllerCountMockHandler = (
  overrideResponse?:
    | LoopbackCount
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LoopbackCount> | LoopbackCount),
) => {
  return http.get('*/khovt-trans-phieu-xuats/count', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getKhovtTransPhieuXuatControllerCountResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getKhovtTransPhieuXuatControllerUpdateByIdMockHandler = () => {
  return http.patch('*/khovt-trans-phieu-xuats/:id', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getKhovtTransPhieuXuatControllerFindByIdMockHandler = (
  overrideResponse?:
    | KhovtTransPhieuXuatWithRelations
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KhovtTransPhieuXuatWithRelations> | KhovtTransPhieuXuatWithRelations),
) => {
  return http.get('*/khovt-trans-phieu-xuats/:id', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getKhovtTransPhieuXuatControllerFindByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getKhovtTransPhieuXuatControllerDeleteByIdMockHandler = () => {
  return http.delete('*/khovt-trans-phieu-xuats/:id', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getKhovtTransPhieuXuatControllerCreateMockHandler = (
  overrideResponse?:
    | KhovtTransPhieuXuat
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<KhovtTransPhieuXuat> | KhovtTransPhieuXuat),
) => {
  return http.post('*/khovt-trans-phieu-xuats', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getKhovtTransPhieuXuatControllerCreateResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getKhovtTransPhieuXuatControllerFindMockHandler = (
  overrideResponse?:
    | KhovtTransPhieuXuatWithRelations[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KhovtTransPhieuXuatWithRelations[]> | KhovtTransPhieuXuatWithRelations[]),
) => {
  return http.get('*/khovt-trans-phieu-xuats', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getKhovtTransPhieuXuatControllerFindResponseMock(),
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};
export const getKhovtTransPhieuXuatControllerMock = () => [
  getKhovtTransPhieuXuatControllerCountMockHandler(),
  getKhovtTransPhieuXuatControllerUpdateByIdMockHandler(),
  getKhovtTransPhieuXuatControllerFindByIdMockHandler(),
  getKhovtTransPhieuXuatControllerDeleteByIdMockHandler(),
  getKhovtTransPhieuXuatControllerCreateMockHandler(),
  getKhovtTransPhieuXuatControllerFindMockHandler(),
];
